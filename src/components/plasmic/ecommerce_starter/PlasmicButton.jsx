// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bL97kH9Dzecu8g2MxMGBSt
// Component: EDRR_UWJpEhW
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css" // plasmic-import: bL97kH9Dzecu8g2MxMGBSt/projectcss
import * as sty from "./PlasmicButton.module.css" // plasmic-import: EDRR_UWJpEhW/css
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: ZnY_XDJ1ZjsN/icon

export const PlasmicButton__VariantProps = new Array(
  "icons",
  "colors",
  "size",
  "rounded",
  "link",
  "states"
)

export const PlasmicButton__ArgProps = new Array(
  "children",
  "slot",
  "children2",
  "children3",
  "children32",
  "children322",
  "children3222",
  "link2"
)

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.a, projectcss.root_reset, sty.root, {
        [sty.root__colors_black]: hasVariant(variants, "colors", "black"),
        [sty.root__colors_blue]: hasVariant(variants, "colors", "blue"),
        [sty.root__colors_gray]: hasVariant(variants, "colors", "gray"),
        [sty.root__colors_lightGrayOutline]: hasVariant(
          variants,
          "colors",
          "lightGrayOutline"
        ),

        [sty.root__colors_lightGray]: hasVariant(
          variants,
          "colors",
          "lightGray"
        ),

        [sty.root__colors_white]: hasVariant(variants, "colors", "white"),
        [sty.root__icons_end]: hasVariant(variants, "icons", "end"),
        [sty.root__icons_five]: hasVariant(variants, "icons", "five"),
        [sty.root__icons_none]: hasVariant(variants, "icons", "none"),
        [sty.root__link]: hasVariant(variants, "link", "link"),
        [sty.root__rounded]: hasVariant(variants, "rounded", "rounded"),
        [sty.root__rounded_size_large]:
          hasVariant(variants, "rounded", "rounded") &&
          hasVariant(variants, "size", "large"),
        [sty.root__size_large]: hasVariant(variants, "size", "large"),
        [sty.root__size_narrow]: hasVariant(variants, "size", "narrow"),
        [sty.root__size_small]: hasVariant(variants, "size", "small"),
        [sty.root__states_active]: hasVariant(variants, "states", "active"),
      })}
      component={Link}
      href={args.link2}
      platform={"gatsby"}
    >
      {(
        hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__ihi8O, {
            [sty.freeBox__icons_end__ihi8OQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__ihi8OrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__icons_none__ihi8Oql7Fn]: hasVariant(
              variants,
              "icons",
              "none"
            ),

            [sty.freeBox__size_large__ihi8OfY0L]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__ihi8OUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg___9F4BR)}
                    role={"img"}
                  />
                ),

                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildren__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetChildren__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetChildren__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren__icons_five]: hasVariant(
                    variants,
                    "icons",
                    "five"
                  ),

                  [sty.slotTargetChildren__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetChildren__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__jxqgm, {
            [sty.freeBox__icons_end__jxqgmQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__jxqgmrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__icons_none__jxqgmql7Fn]: hasVariant(
              variants,
              "icons",
              "none"
            ),

            [sty.freeBox__size_large__jxqgmfY0L]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__jxqgmUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__dnss2)}
                    role={"img"}
                  />
                ),

                value: args.children3,
                className: classNames(sty.slotTargetChildren3, {
                  [sty.slotTargetChildren3__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren3__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetChildren3__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetChildren3__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren3__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren3__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetChildren3__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__rMAjz, {
            [sty.freeBox__icons_end__rMAjzQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__rMAjzrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__icons_none__rMAjzql7Fn]: hasVariant(
              variants,
              "icons",
              "none"
            ),

            [sty.freeBox__size_large__rMAjzfY0L]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__rMAjzUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__tpGsf)}
                    role={"img"}
                  />
                ),

                value: args.children32,
                className: classNames(sty.slotTargetChildren32, {
                  [sty.slotTargetChildren32__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren32__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetChildren32__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetChildren32__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren32__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren32__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetChildren32__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__vHjjS, {
            [sty.freeBox__icons_end__vHjjSQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__vHjjSrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__icons_none__vHjjSql7Fn]: hasVariant(
              variants,
              "icons",
              "none"
            ),

            [sty.freeBox__size_large__vHjjSfY0L]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__vHjjSUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__nL4Vl)}
                    role={"img"}
                  />
                ),

                value: args.children322,
                className: classNames(sty.slotTargetChildren322, {
                  [sty.slotTargetChildren322__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren322__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetChildren322__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetChildren322__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren322__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren322__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetChildren322__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__l0U7S, {
            [sty.freeBox__icons_end__l0U7SQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__l0U7SrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__icons_none__l0U7Sql7Fn]: hasVariant(
              variants,
              "icons",
              "none"
            ),

            [sty.freeBox__size_large__l0U7SfY0L]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__l0U7SUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__oAw7P)}
                    role={"img"}
                  />
                ),

                value: args.children3222,
                className: classNames(sty.slotTargetChildren3222, {
                  [sty.slotTargetChildren3222__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren3222__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetChildren3222__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetChildren3222__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren3222__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren3222__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetChildren3222__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? false
          : hasVariant(variants, "icons", "only")
          ? false
          : true
      )
        ? p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlot__colors_black]: hasVariant(
                variants,
                "colors",
                "black"
              ),

              [sty.slotTargetSlot__colors_blue]: hasVariant(
                variants,
                "colors",
                "blue"
              ),

              [sty.slotTargetSlot__colors_gray]: hasVariant(
                variants,
                "colors",
                "gray"
              ),

              [sty.slotTargetSlot__icons_both]: hasVariant(
                variants,
                "icons",
                "both"
              ),

              [sty.slotTargetSlot__icons_end]: hasVariant(
                variants,
                "icons",
                "end"
              ),

              [sty.slotTargetSlot__icons_five]: hasVariant(
                variants,
                "icons",
                "five"
              ),

              [sty.slotTargetSlot__icons_only]: hasVariant(
                variants,
                "icons",
                "only"
              ),

              [sty.slotTargetSlot__link]: hasVariant(variants, "link", "link"),
              [sty.slotTargetSlot__size_large]: hasVariant(
                variants,
                "size",
                "large"
              ),

              [sty.slotTargetSlot__size_small]: hasVariant(
                variants,
                "size",
                "small"
              ),
            }),
          })
        : null}
      {(
        hasVariant(variants, "icons", "both")
          ? true
          : hasVariant(variants, "icons", "end")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__xwRdh, {
            [sty.freeBox__icons_both__xwRdh2BNlg]: hasVariant(
              variants,
              "icons",
              "both"
            ),

            [sty.freeBox__icons_end__xwRdhQw64]: hasVariant(
              variants,
              "icons",
              "end"
            ),

            [sty.freeBox__icons_five__xwRdHrgPz4]: hasVariant(
              variants,
              "icons",
              "five"
            ),

            [sty.freeBox__size_small__xwRdhUhOay]: hasVariant(
              variants,
              "size",
              "small"
            ),
          })}
        >
          {(
            hasVariant(variants, "icons", "both")
              ? true
              : hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__vqX3Y)}
                    role={"img"}
                  />
                ),

                value: args.children2,
                className: classNames(sty.slotTargetChildren2, {
                  [sty.slotTargetChildren2__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetChildren2__icons_both]: hasVariant(
                    variants,
                    "icons",
                    "both"
                  ),

                  [sty.slotTargetChildren2__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),

                  [sty.slotTargetChildren2__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),

                  [sty.slotTargetChildren2__link]: hasVariant(
                    variants,
                    "link",
                    "link"
                  ),
                }),
              })
            : null}
        </div>
      ) : null}
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicButton"
  } else {
    func.displayName = `PlasmicButton.${nodeName}`
  }
  return func
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  }
)

export default PlasmicButton
/* prettier-ignore-end */
