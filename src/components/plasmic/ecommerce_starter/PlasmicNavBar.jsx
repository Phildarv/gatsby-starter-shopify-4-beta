// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bL97kH9Dzecu8g2MxMGBSt
// Component: XWbHcDJXryxF
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Button from "../../Button" // plasmic-import: EDRR_UWJpEhW/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css" // plasmic-import: bL97kH9Dzecu8g2MxMGBSt/projectcss
import * as sty from "./PlasmicNavBar.module.css" // plasmic-import: XWbHcDJXryxF/css
import Icon24Icon from "./icons/PlasmicIcon__Icon24" // plasmic-import: icXeXfeZhCw6/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2" // plasmic-import: QtpPB9TMc1EI/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3" // plasmic-import: O9O5AMfrefFk/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4" // plasmic-import: xp5PWf8132e8/icon

export const PlasmicNavBar__VariantProps = new Array("filled", "searchOpen")

export const PlasmicNavBar__ArgProps = new Array()

function PlasmicNavBar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__searchOpen]: hasVariant(
          variants,
          "searchOpen",
          "searchOpen"
        ),
      })}
    >
      <div
        data-plasmic-name={"container2"}
        data-plasmic-override={overrides.container2}
        className={classNames(defaultcss.all, sty.container2, {
          [sty.container2__filled]: hasVariant(variants, "filled", "filled"),
        })}
      >
        <Button link2={"/"} slot={"Home"}>
          <Icon24Icon
            className={classNames(defaultcss.all, sty.svg__arxHk)}
            role={"img"}
          />
        </Button>

        <div className={classNames(defaultcss.all, sty.freeBox__yEQeS)} />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__cwJcN, {
            [sty.freeBox__searchOpen__cwJcNUs0Mc]: hasVariant(
              variants,
              "searchOpen",
              "searchOpen"
            ),
          })}
        >
          {(hasVariant(variants, "searchOpen", "searchOpen") ? false : true) ? (
            <Button
              className={classNames("__wab_instance", {
                [sty.button__searchOpen__i3GhJUs0Mc]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                ),
              })}
              icons={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? undefined
                  : "only"
              }
              link2={"/category"}
              slot={"Menu"}
            >
              <Icon2Icon
                className={classNames(defaultcss.all, sty.svg__bxb1Z)}
                role={"img"}
              />
            </Button>
          ) : null}
          {(hasVariant(variants, "searchOpen", "searchOpen") ? true : false) ? (
            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox, {
                [sty.textbox__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                ),
              })}
              placeholder={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? "Searchâ€¦"
                  : "Some placeholder"
              }
              size={1}
              type={"text"}
              value={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? ""
                  : "Some value"
              }
            />
          ) : null}

          <Button icons={"only"} slot={"Menu"}>
            <Icon3Icon
              className={classNames(defaultcss.all, sty.svg__l9MfZ)}
              role={"img"}
            />
          </Button>

          <div className={classNames(defaultcss.all, sty.freeBox___8DqXm)}>
            <Button
              colors={"white"}
              rounded={"rounded"}
              slot={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text,
                    {
                      [sty.text__filled]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      ),
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled") ? "1" : "0"}
                </div>
              }
            >
              <Icon4Icon
                className={classNames(defaultcss.all, sty.svg__s1Cn)}
                role={"img"}
              />
            </Button>
          </div>
        </p.Stack>
      </div>
    </section>
  )
}

const PlasmicDescendants = {
  root: ["root", "container2", "textbox", "text"],
  container2: ["container2", "textbox", "text"],
  textbox: ["textbox"],
  text: ["text"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar"
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`
  }
  return func
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container2: makeNodeComponent("container2"),
    textbox: makeNodeComponent("textbox"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps,
  }
)

export default PlasmicNavBar
/* prettier-ignore-end */
