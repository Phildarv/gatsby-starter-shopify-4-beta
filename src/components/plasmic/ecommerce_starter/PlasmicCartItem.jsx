// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bL97kH9Dzecu8g2MxMGBSt
// Component: b4PVBEobYmxJ
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: wjkIUuh2R8iq/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css" // plasmic-import: bL97kH9Dzecu8g2MxMGBSt/projectcss
import * as sty from "./PlasmicCartItem.module.css" // plasmic-import: b4PVBEobYmxJ/css
import Icon31Icon from "./icons/PlasmicIcon__Icon31" // plasmic-import: 4oKNud5LGNVm/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30" // plasmic-import: 0qDqf4HUIUmd/icon

export const PlasmicCartItem__VariantProps = new Array()

export const PlasmicCartItem__ArgProps = new Array("children")

function PlasmicCartItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"200px"}
          src={
            "https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_2000,h_2000/global/194681/02/sv01/fnd/PNA/fmt/png/Eternity-NITRO-Men's-Running-Shoes"
          }
        />
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    defaultcss.__wab_text,
                    sty.link___91Lop
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"Enter some text"}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__t7COl
                  )}
                >
                  {"#00000"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__rkVJ
                  )}
                >
                  {"Size: 11"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__jgQnQ
                  )}
                >
                  {"Quantity: 1"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__hfRxh)}
                >
                  <Icon31Icon
                    className={classNames(defaultcss.all, sty.svg__zgZcn)}
                    role={"img"}
                  />

                  <Icon30Icon
                    className={classNames(defaultcss.all, sty.svg__b8Iz9)}
                    role={"img"}
                  />
                </p.Stack>
              </React.Fragment>
            ),

            value: args.children,
          })}
        </p.Stack>
      ) : null}
    </div>
  ) : null
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCartItem__ArgProps,
      internalVariantPropNames: PlasmicCartItem__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicCartItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicCartItem"
  } else {
    func.displayName = `PlasmicCartItem.${nodeName}`
  }
  return func
}

export const PlasmicCartItem = Object.assign(
  // Top-level PlasmicCartItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicCartItem
    internalVariantProps: PlasmicCartItem__VariantProps,
    internalArgProps: PlasmicCartItem__ArgProps,
  }
)

export default PlasmicCartItem
/* prettier-ignore-end */
